{"version":3,"sources":["../alias/react.js","../node_modules/memoize-one/dist/memoize-one.esm.js","styles.js","index.jsx"],"names":["window","__COGNIGY_WEBCHAT","Error","module","exports","React","index","areInputsEqual","newInputs","lastInputs","length","i","resultFn","isEqual","lastThis","lastArgs","lastResult","calledOnce","result","_len","arguments","newArgs","Array","_key","apply","button","theme","backgroundColor","greyColor","color","greyContrastColor","cursor","border","height","padding","unitSize","borderRadius","primaryButton","background","primaryGradient","primaryContrastColor","outlinedButton","primaryColor","submitButton","flexGrow","marginLeft","cancelButton","openDialogButton","borderColor","dialog","display","flexDirection","alignItems","paddingTop","paddingBottom","paddingLeft","paddingRight","header","minHeight","blockSize","boxSizing","fontWeight","boxShadow","shadow","zIndex","content","footer","justifyContent","getStyles","openDialogButtonStyles","headerStyles","contentStyles","footerStyles","submitButtonStyles","cancelButtonStyles","dialogStyles","getStylesMemo","Dialog","props","isFullscreen","onSetFullscreen","attributes","onDismissFullscreen","onSendMessage","styles","submit","dialogPlugin","match","component","cognigyWebchatMessagePlugins","push"],"mappings":"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","file":"dialog-example.webchat-plugin.js","sourceRoot":"..\\src","sourcesContent":["if (!window.__COGNIGY_WEBCHAT)\r\n    throw new Error('Cognigy Webchat v2.7 or higher has to be loaded before this plugin');\r\n\r\nmodule.exports = window.__COGNIGY_WEBCHAT.React;","function areInputsEqual(newInputs, lastInputs) {\n  if (newInputs.length !== lastInputs.length) {\n    return false;\n  }\n\n  for (var i = 0; i < newInputs.length; i++) {\n    if (newInputs[i] !== lastInputs[i]) {\n      return false;\n    }\n  }\n\n  return true;\n}\n\nfunction index (resultFn, isEqual) {\n  if (isEqual === void 0) {\n    isEqual = areInputsEqual;\n  }\n\n  var lastThis;\n  var lastArgs = [];\n  var lastResult;\n  var calledOnce = false;\n\n  var result = function result() {\n    for (var _len = arguments.length, newArgs = new Array(_len), _key = 0; _key < _len; _key++) {\n      newArgs[_key] = arguments[_key];\n    }\n\n    if (calledOnce && lastThis === this && isEqual(newArgs, lastArgs)) {\n      return lastResult;\n    }\n\n    lastResult = resultFn.apply(this, newArgs);\n    calledOnce = true;\n    lastThis = this;\n    lastArgs = newArgs;\n    return lastResult;\n  };\n\n  return result;\n}\n\nexport default index;\n","const button = theme => ({\r\n    backgroundColor: theme.greyColor,\r\n    color: theme.greyContrastColor,\r\n  \r\n    cursor: \"pointer\",\r\n    border: \"none\",\r\n  \r\n    height: 40,\r\n  \r\n    padding: `${theme.unitSize}px ${theme.unitSize * 2}px`,\r\n    borderRadius: theme.unitSize * 2,\r\n  })\r\n  \r\n  const primaryButton = theme => ({\r\n    ...button(theme),\r\n    background: theme.primaryGradient,\r\n    color: theme.primaryContrastColor\r\n  })\r\n  \r\n  const outlinedButton = theme => ({\r\n    ...button(theme),\r\n    backgroundColor: 'transparent',\r\n    border: `1px solid ${theme.primaryColor}`,\r\n    color: theme.primaryColor\r\n  })\r\n  \r\n  const submitButton = theme => ({\r\n    ...primaryButton(theme),\r\n    flexGrow: 2,\r\n    marginLeft: theme.unitSize * 2\r\n  })\r\n  \r\n  const cancelButton = theme => ({\r\n    ...button(theme),\r\n    flexGrow: 1\r\n  })\r\n  \r\n  const openDialogButton = theme => ({\r\n    ...outlinedButton(theme),\r\n    '&[disabled]': {\r\n      borderColor: theme.greyColor,\r\n      color: theme.greyColor,\r\n      cursor: 'default'\r\n    }\r\n  })\r\n  \r\n  const dialog = theme => ({\r\n    display: 'flex',\r\n    flexDirection: 'column',\r\n    alignItems: 'stretch'\r\n  })\r\n  \r\n  const padding = theme => ({\r\n    paddingTop: theme.unitSize,\r\n    paddingBottom: theme.unitSize,\r\n    paddingLeft: theme.unitSize * 2,\r\n    paddingRight: theme.unitSize * 2\r\n  })\r\n  \r\n  const header = theme => ({\r\n    ...padding(theme),\r\n  \r\n    display: 'flex',\r\n    alignItems: 'center',\r\n  \r\n    minHeight: theme.blockSize,\r\n    boxSizing: 'border-box',\r\n    \r\n    background: theme.primaryGradient,\r\n    color: theme.primaryContrastColor,\r\n    fontWeight: 'bolder',\r\n  \r\n    boxShadow: theme.shadow,\r\n  \r\n    zIndex: 2\r\n  })\r\n  \r\n  const content = theme => ({\r\n    ...padding(theme),\r\n    flexGrow: 1\r\n  })\r\n  \r\n  const footer = theme => ({\r\n    ...padding(theme),\r\n    display: 'flex',\r\n    justifyContent: 'space-between',\r\n    alignItems: 'center',\r\n    backgroundColor: 'white',\r\n    boxShadow: theme.shadow,\r\n  })\r\n  \r\n  export const getStyles = theme => {\r\n    const openDialogButtonStyles = openDialogButton(theme);\r\n    const headerStyles = header(theme);\r\n    const contentStyles = content(theme);\r\n    const footerStyles = footer(theme);\r\n    const submitButtonStyles = submitButton(theme);\r\n    const cancelButtonStyles = cancelButton(theme);\r\n    const dialogStyles = dialog(theme);\r\n  \r\n    return {\r\n      openDialogButtonStyles,\r\n      headerStyles,\r\n      contentStyles,\r\n      footerStyles,\r\n      submitButtonStyles,\r\n      cancelButtonStyles,\r\n      dialogStyles\r\n    }\r\n  };","import * as React from 'react';\r\nimport memoize from 'memoize-one';\r\n\r\nimport { getStyles } from './styles';\r\n\r\n// only re-calculate if theme changed\r\nconst getStylesMemo = memoize(getStyles);\r\n\r\nconst Dialog = (props) => {\r\n    // if not fullscreen, show button that can switch to fullscreen\r\n\r\n    /**\r\n     * If the message is not displayed in \"fullscreen\" mode,\r\n     * show a button that can switch this message \r\n     * to \"fullscreen\" mode.\r\n     */\r\n    \r\n    const { \r\n        isFullscreen, \r\n        onSetFullscreen, \r\n        theme \r\n    } = props;\r\n\r\n    if (!isFullscreen) {\r\n        const { openDialogButtonStyles } = getStylesMemo(theme);\r\n\r\n        return (\r\n            <button\r\n                type='button'\r\n                onClick={onSetFullscreen}\r\n                style={openDialogButtonStyles}\r\n            >\r\n                open dialog\r\n            </button>\r\n        )\r\n    }\r\n\r\n    /**\r\n     * If this message is displayed in \"fullscreen\" mode\r\n     * show a dialog with a header, content and footer.\r\n     * \r\n     * The header indicates the topic of the dialog\r\n     * The content shows information or an interactive input method\r\n     * The footer contains a submit and dismiss button\r\n     */\r\n\r\n    const { \r\n        attributes, \r\n        onDismissFullscreen, \r\n        onSendMessage \r\n    } = props;\r\n\r\n    const { \r\n        dialogStyles, \r\n        headerStyles, \r\n        contentStyles, \r\n        footerStyles, \r\n        submitButtonStyles, \r\n        cancelButtonStyles \r\n    } = getStylesMemo(theme);\r\n\r\n    return (\r\n        <div\r\n            {...attributes}\r\n            style={{\r\n                ...attributes.styles,\r\n                ...dialogStyles\r\n            }}\r\n        >\r\n            <header style={headerStyles}>\r\n                Dialog Title\r\n            </header>\r\n            <main style={contentStyles}>\r\n                Dialog Content\r\n            </main>\r\n            <footer style={footerStyles}>\r\n                <button\r\n                    type='button'\r\n                    onClick={onDismissFullscreen}\r\n                    style={cancelButtonStyles}\r\n                >\r\n                    cancel\r\n                </button>\r\n                <button\r\n                    type='button'\r\n                    onClick={() => onSendMessage('', { submit: true })}\r\n                    style={submitButtonStyles}\r\n                >\r\n                    submit\r\n                </button>\r\n            </footer>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst dialogPlugin = {\r\n    match: 'dialog',\r\n    component: Dialog\r\n}\r\n\r\nif (!window.cognigyWebchatMessagePlugins) {\r\n    window.cognigyWebchatMessagePlugins = []\r\n}\r\n\r\nwindow.cognigyWebchatMessagePlugins.push(dialogPlugin);"]}